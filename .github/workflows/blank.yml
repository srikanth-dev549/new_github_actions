name: 'Create New GCP Sandbox Proiect!'

on:
  workflow_dispatch:
    inputs:
      PROJECT_NAME:
        required: true 
        type: string 
        description: Project Name
#       AD_GROUP_NAME:
#         required: true 
#         type: string
#         description: AD Group to Access Project
#       COSTCENTER:
#         required: true 
#         type: string
#         description: Cost Center (all lowercase, dash and underscores; no special characters)
#       OWNER:
#         required: true 
#         type: string
#         description: Owner (all lowercase, dash and underscores; no special characters)
#       OWNER_EMAIL:
#         required: true 
#         type: string
#         description: Owner Email (all lowercase, dash and underscores; no special characters)
#       ITPR:
#         required: true 
#         type: string
#         description: ITPR (all lowercase, dash and underscores; no special characters)
#       CONTACT_EMAIL:
#         required: true 
#         type: string
#         description: Contact Email (all lowercase, dash and underscores; no special characters)
#       DATACLASS:
#         required: true 
#         type: string
#         description: Dataclassification (all lowercase, dash and underscores; no special characters)

permissions:
  id-token: write 
  contents: write

jobs:
  setup_new_directory:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install required tools 
      run: |-
        sudo apt-get install -y gettext-base
        sudo apt-get install moreutils
        sudo apt-get update -y 
        sudo apt-get --yes install openssh-client
        
    - name: Authenticating gcloud
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY_NEW }}'
    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'
    - name: 'Use gcloud CLI'
      run: |
        gcloud info
        
    - name: Create BRANCH NAME env variable 
      run: echo "BRANCH_NAME=feature/${{github.event.inputs.PROJECT_NAME}}" >> $GITHUB_ENV
          
    - name: Read BRANCH NAME env variable
      id: get_branch_name
      run: echo "::set-output name=branch_name::${{ env.BRANCH_NAME }}"
        
    - name: Checkout new or existing branch 
      run: |-
        if [ $(git branch -a | grep "${{ env.BRANCH_NAME }}" | wc -l) -eq 0 ]; then git branch "${{ env.BRANCH_NAME }}" && echo "branch created"; fi
        git checkout ${{ env.BRANCH_NAME }}
        git config --global user.email ${{env.GIT_COMMITTER_EMAIL}}
        git config --global user.name  ${{env.GIT_COMMITTER_NAME}}
      env:
        GIT AUTHOR EMAIL: "git@github.com"
        GIT_AUTHOR_NAME: "Github Actions"
        GIT_COMMITTER_EMAIL: "git@github.com"
        GIT_COMMITTER_NAME: "Github Actions"
    - name: Add Subscription Project 
      run: |-
        ls
        if [ -d ${{github.event.inputs.PROJECT_NAME}} ]; then 
          echo "Directory already exists, skipping creation."
          cd ${{github.event.inputs.PROJECT_NAME}}
          if [ -e ${{github.event.inputs.PROJECT_NAME}}-data.json ]; then
            echo "File exists"
              if git diff --quiet HEAD ${{github.event.inputs.PROJECT_NAME}}-data.json; then
                echo "File has not been modified since last commit"
              else
                echo "File has been modified since last commit"
                # Run your code here
                git add ${{github.event.inputs.PROJECT_NAME}}-data.json
                git commit -m "Updated data.json"
              fi
          else
            echo "File does not exist running main.py to get the latest changes in the project"
            python3 main.py
            git add ${{github.event.inputs.PROJECT_NAME}}-data.json
            git commit -m "Updated data.json"
          fi 
        else 
          mkdir -p ${{github.event.inputs.PROJECT_NAME}} \
          && echo "Directory created, copying files." \
          && cp template/* ${{github.event.inputs.PROJECT_NAME}} \
          && cd ${{github.event.inputs.PROJECT_NAME}} \
          && envsubst < "main.py" | sponge "main.py" \
          && envsubst < "main.tf" | sponge "main.tf" \
          && envsubst < terraform.tfvars.template > terraform.auto.tfvars \
          && python3 main.py
        fi
      env:
        PROJECT_NAME: ${{github.event.inputs.PROJECT_NAME}} 
        AD_GROUP_NAME : ${{github.event.inputs.AD_GROUP_NAME}} 
        COSTCENTER: ${{github.event.inputs.COSTCENTER}} 
        OWNER: ${{github.event.inputs.OWNER}} 
        OWNER_EMAIL: ${{github.event.inputs.OWNER_EMAIL}} 
        ITPR: S{{github.event.inputs.ITPR}}
        CONTACT_EMAIL: ${{github.event.inputs.CONTACT_EMAIL}}
        DATACLASS: ${{github.event.inputs.DATACLASS}} 
        APPNAME: ${{github.event.inputs.APPNAME}}

    - name: Add, Commit, and Push Changes
      run: |-
        if git diff-index --quiet HEAD --; then
           echo "No changes to commit"
        else
          git commit -m "Added ${{github.event.inputs.PROJECT_NAME}} sandbox project" 
          git push -u origin "${{env.BRANCH_NAME}}" 
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
        GIT_AUTHOR_EMAIL: "git@github.com"
        GIT_AUTHOR_NAME: "Github Actions"
        GIT_COMMITTER_EMAIL: "git@github.com"
        GIT_COMMITTER_NAME: "Github Actions"
        
    outputs:
      branch_name: ${{ steps.get_branch_name.outputs.branch_name }}
