name: CI/CD Pipeline

on:
  push:
    branches:
      - main
jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: |
          echo "${{github.event.inputs.PROJECT_NAME}}"     

# env:
#   PROJECT_ID: new-project1-376506
    
# jobs:
#   setup:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Install dependencies
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y python3-pip
      

#   generate-data:
#     runs-on: ubuntu-latest
#     needs: setup
#     steps:
#       - name: Checkout code of public repo
#         uses: actions/checkout@v2
#         with:
#           persist-credentials: true
#           fetch-depth: 0
#           path: public_repo
#       - name: Checking if the project directory is alreay present in the repo if no creates a new dir
#         run: |
#           cd public_repo
#           if [ -d "$PROJECT_ID" ]; then
#             echo "Directory already exists, skipping creation."
#           else
#             mkdir -p "$PROJECT_ID"
#             echo "Directory created."
#           fi
#       - name: Checkout code of private repo 
#         uses: actions/checkout@v2
#         with:
#           repository: srikanth-dev549/files
#           ref: main 
#           token: ${{ secrets.TOKEN }}
#           clean: false
#           path: private_repo
#       - name: Authenticating gcloud
#         uses: 'google-github-actions/auth@v1'
#         with:
#           credentials_json: '${{ secrets.GCP_SA_KEY_NEW }}'
#       - name: 'Set up Cloud SDK'
#         uses: 'google-github-actions/setup-gcloud@v1'
#       - name: 'Use gcloud CLI'
#         run: 'gcloud info'
#       - name: Run python file to get all the principles and roles in data.json | if data.json is already present it will be updated with any manual changes made to the GCP IAM roles
#         run: |
#           cd private_repo
#           ls
#           python3 main.py
#           cp $PROJECT_ID-data.json ../public_repo/$PROJECT_ID/
#           cd ../public_repo/$PROJECT_ID/
#           git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
#           git config --global user.name "github-actions[bot]"
#           git add $PROJECT_ID-data.json
#           if git diff-index --quiet HEAD --; then
#             echo "No changes to commit"
#           else
#             git commit -m "Update data.json"
#             git push origin main
#           fi
#           cd ../../
#           ls
#           cd private_repo
#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v1
#       - name: Initialize Terraform
#         run: |
#           cd private_repo
#           terraform init -backend-config="prefix=$PROJECT_ID-statefile"
#       - name: Apply Terraform changes
#         run: |
#           cd private_repo
#           terraform apply -var="data_file=$PROJECT_ID-data.json" -auto-approve
